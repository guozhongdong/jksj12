package com.gzd.leetcode.greed;

import java.util.Arrays;

/**
 * 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
 * <p>
 * 对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；
 * 并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，
 * 这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
 * <p>
 *  
 * 示例 1:
 * <p>
 * 输入: g = [1,2,3], s = [1,1]
 * 输出: 1
 * 解释:
 * 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
 * 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
 * 所以你应该输出1。
 * 示例 2:
 * <p>
 * 输入: g = [1,2], s = [1,2,3]
 * 输出: 2
 * 解释:
 * 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
 * 你拥有的饼干数量和尺寸都足以让所有孩子满足。
 * 所以你应该输出2.
 *  
 * <p>
 * 提示：
 * <p>
 * 1 <= g.length <= 3 * 104
 * 0 <= s.length <= 3 * 104
 * 1 <= g[i], s[j] <= 231 - 1
 * <p>
 * 暴力解法，遍历饼干
 * 关键题意，每个孩子最多只能给一块饼干
 *
 *
 * 分别对两个数组进行排序
 * 然后按需求最小的孩子和最小的饼干开始比对，如果饼干的需求满足不了孩子的最小需求，
 * 则饼干向后查找，直到满足
 */
public class FindContentChildren_455 {

    public static void main(String[] args) {

    }

    public int findContentChildren(int[] g, int[] s) {

        Arrays.sort(g);
        Arrays.sort(s);
        int ans = 0;
        for (int i=0,j = 0; i < g.length && j < s.length ; i++, j++) {
            // 查找饼干,饼干不满足，继续往后查找
            // g = 3 4 5 6 7 8
            // s = 1 2 3 4 5 6
            while (j < s.length && s[i] < g[i]){
                j++;
            }
            // 循环里j++,是把这块饼干用掉，直接过滤
            if (j<s.length){
                ans++;
            }
        }
        return ans;
    }
}
