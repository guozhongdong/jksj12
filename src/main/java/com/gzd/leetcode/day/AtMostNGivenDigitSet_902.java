package com.gzd.leetcode.day;

/**
 * 给定一个按 非递减顺序 排列的数字数组 digits 。你可以用任意次数 digits[i] 来写的数字。例如，如果 digits = ['1','3','5']，我们可以写数字，如 '13', '551', 和 '1351315'。
 *
 * 返回 可以生成的小于或等于给定整数 n 的正整数的个数 。
 *
 *  
 *
 * 示例 1：
 *
 * 输入：digits = ["1","3","5","7"], n = 100
 * 输出：20
 * 解释：
 * 可写出的 20 个数字是：
 * 1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.
 * 示例 2：
 *
 * 输入：digits = ["1","4","9"], n = 1000000000
 * 输出：29523
 * 解释：
 * 我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，
 * 81 个四位数字，243 个五位数字，729 个六位数字，
 * 2187 个七位数字，6561 个八位数字和 19683 个九位数字。
 * 总共，可以使用D中的数字写出 29523 个整数。
 * 示例 3:
 *
 * 输入：digits = ["7"], n = 8
 * 输出：1
 *  
 *
 * 提示：
 *
 * 1 <= digits.length <= 9
 * digits[i].length == 1
 * digits[i] 是从 '1' 到 '9' 的数
 * digits 中的所有值都 不同 
 * digits 按 非递减顺序 排列
 * 1 <= n <= 109
 *
 * 从示例的规律来看，如果给的数是n，则个数是n,两位数是n^2 ,三位数是n^3
 * 1 4 5 9 ，全排列
 * 11 14 15 19
 * 41 44 45 49
 * 51 54 55 59
 * 91 94 95 99
 *
 * 这样的话，我只需要判断给定的目标数是几位数，
 * n = 1000 , 3位的个数+2位的个数+1位的个数
 *
 * 非递减，
 * 1、拆解目标数，看如何模板的数量
 * 2、
 *
 *
 */
public class AtMostNGivenDigitSet_902 {

    public static void main(String[] args) {

    }

    public int atMostNGivenDigitSet(String[] digits, int n) {

        return 0;
    }
}
