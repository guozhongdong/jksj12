package com.gzd.leetcode.bit;


/**
 * 你的任务是计算 ab 对 1337 取模，a 是一个正整数，b 是一个非常大的正整数且会以数组形式给出。
 * <p>
 *  
 * <p>
 * 示例 1：
 * <p>
 * 输入：a = 2, b = [3]
 * 输出：8
 * 示例 2：
 * <p>
 * 输入：a = 2, b = [1,0]
 * 输出：1024
 * 示例 3：
 * <p>
 * 输入：a = 1, b = [4,3,3,8,5,2]
 * 输出：1
 * 示例 4：
 * <p>
 * 输入：a = 2147483647, b = [2,0,0]
 * 输出：1198
 *  
 * <p>
 * 提示：
 * <p>
 * 1 <= a <= 231 - 1
 * 1 <= b.length <= 2000
 * 0 <= b[i] <= 9
 * b 不含前导 0
 * 数学公式，求模的结合律
 */
public class SuperPow_372 {

    public static void main(String[] args) {
        long a = (long) Math.pow(2147483647, 200);
        SuperPow_372 pow = new SuperPow_372();
        int[] b = {2,0,0};
        System.out.println(pow.superPow(2147483647, b));
    }

    /**
     * 分两部分计算
     * 一部分是按公式计算取mod
     * 一部分是拆解幂次方
     * b数组的最后一位n ,可以理解他的幂次方为 a^ (10 ^ 0 * bi)
     * i 是下标
     */

    static final int mod = 1337;


    /**
     * a
     * K
     * =99
     * 2345
     * <p>
     * 99^{2345} = 99^{234 * 10 + 5}99
     * 2345
     * =99
     * 234∗10+5
     * <p>
     * 99^{234 * 10 + 5} = 99^{234 * 10} * 99^{5}99
     * 234∗10+5
     * =99
     * 234∗10
     * ∗99
     * 5
     * <p>
     * 99^{234 * 10} * 99^{5} = {(99^{234})}^{10} * 99^{5}99
     * 234∗10
     * ∗99
     * 5
     * =(99
     * 234
     * )
     * 10
     * ∗99
     * 5
     * <p>
     * 99 ^ 2345 = 99 ^ (234*10) + 5 = (99 ^ 234)^10 * 99 ^ 5;
     * 第一次先计算99^5次方，然后把99更新为 99^10 次方，第一次计算完毕还剩 99^234
     */
    public int superPow(int a, int[] b) {

        int res = 1;
        // 倒序遍历
        for (int i = b.length - 1; i >= 0; i--) {
            // 求b数组各位次方的幂次方 99 ^ a
            // 更新a的值为 99^10,最终求 99^234
            res = (int) ((long) res * pow(a, b[i]) % mod);
            a = pow(a, 10);
        }
        return res;
    }

    /**
     * 模拟次方相乘
     * b是次方，代表乘的次数
     * <p>
     * 99^5
     */
    private int pow(int a, int b) {
        int res = 1;
        while (b != 0) {
            // 奇次米，需要记录一次原数
            if (b % 2 != 0) {
                res = (int) ((long) res * a % mod);
            }
            a = (int) ((long) a * a % mod);
            b /= 2;
        }
        return res;
    }
}
